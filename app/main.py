"""
Aplicaci√≥n principal de MoirAI
FastAPI app con todos los endpoints y configuraci√≥n
"""
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException
import uvicorn
from datetime import datetime

from app.core.config import settings
from app.core.database import create_db_and_tables
from app.api.endpoints import students, auth
from app.schemas import ErrorResponse


# Crear aplicaci√≥n FastAPI
app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    description="""
    **MoirAI - Plataforma de Matching Laboral UNRC**
    
    API RESTful para conectar estudiantes de la Universidad Nacional de R√≠o Cuarto 
    con oportunidades laborales mediante an√°lisis inteligente de perfiles y matchmaking automatizado.
    
    ## Caracter√≠sticas principales:
    
    -   An√°lisis NLP de Curr√≠culums**: Extracci√≥n autom√°tica de habilidades t√©cnicas, blandas y proyectos
    *   Matchmaking Inteligente**: Algoritmos de compatibilidad entre perfiles y vacantes
    *   B√∫squeda Multi-proveedor**: Integraci√≥n con m√∫ltiples fuentes de trabajos
    *   Gesti√≥n de Roles**: Acceso diferenciado para estudiantes, empresas y administradores
    *   Cumplimiento LFPDPPP**: Protecci√≥n de datos y auditor√≠a integrada
    *   Arquitectura Escalable**: FastAPI + PostgreSQL + modelos de ML

    ## Roles de Usuario:
    
    * **Estudiantes**: Gesti√≥n de perfil, recomendaciones personalizadas
    * **Empresas**: B√∫squeda y filtrado de candidatos, publicaci√≥n de vacantes
    * **Administradores**: KPIs, gesti√≥n de usuarios, auditor√≠a del sistema
    """,
    contact={
        "name": "UNRC - Ciencia de Datos para Negocios",
        "url": "https://www.ing.unrc.edu.ar/",
        "email": "contacto@ing.unrc.edu.ar"
    },
    license_info={
        "name": "Apache License, Version 2.0",
        "url": "https://opensource.org/license/apache-2-0"
    }
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.BACKEND_CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)


# Event handlers
@app.on_event("startup")
async def startup_event():
    """Inicializar aplicaci√≥n"""
    # Crear tablas de base de datos
    create_db_and_tables()
    print(f"üöÄ {settings.PROJECT_NAME} iniciado correctamente")
    print(f"üìä Base de datos: {settings.DATABASE_URL}")
    print(f"üîê Audit logging: {'‚úÖ' if settings.ENABLE_AUDIT_LOGGING else '‚ùå'}")


@app.on_event("shutdown")
async def shutdown_event():
    """Limpiar recursos al cerrar"""
    print(f"üõë {settings.PROJECT_NAME} detenido")


# Manejadores de errores globales
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """Manejar errores de validaci√≥n de Pydantic"""
    return JSONResponse(
        status_code=422,
        content=ErrorResponse(
            error_code="VALIDATION_ERROR",
            message="Error de validaci√≥n en los datos enviados",
            details={
                "errors": exc.errors(),
                "body": exc.body if hasattr(exc, 'body') else None
            }
        ).dict()
    )


@app.exception_handler(StarletteHTTPException)
async def http_exception_handler(request: Request, exc: StarletteHTTPException):
    """Manejar errores HTTP generales"""
    return JSONResponse(
        status_code=exc.status_code,
        content=ErrorResponse(
            error_code="HTTP_ERROR",
            message=str(exc.detail),
            details={
                "status_code": exc.status_code,
                "path": str(request.url.path)
            }
        ).dict()
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """Manejar errores generales no capturados"""
    return JSONResponse(
        status_code=500,
        content=ErrorResponse(
            error_code="INTERNAL_ERROR",
            message="Error interno del servidor",
            details={
                "type": type(exc).__name__,
                "path": str(request.url.path)
            }
        ).dict()
    )


# Endpoints principales
@app.get("/", tags=["root"])
async def root():
    """Endpoint ra√≠z con informaci√≥n de la API"""
    return {
        "message": f"Bienvenido a {settings.PROJECT_NAME}",
        "version": settings.VERSION,
        "status": "operational",
        "timestamp": datetime.utcnow().isoformat(),
        "docs_url": "/docs",
        "openapi_url": "/openapi.json"
    }


@app.get("/health", tags=["health"])
async def health_check():
    """Health check endpoint para monitoreo"""
    return {
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat(),
        "version": settings.VERSION,
        "environment": "development" if settings.DATABASE_URL.startswith("sqlite") else "production"
    }


@app.get("/info", tags=["info"])
async def api_info():
    """Informaci√≥n detallada de la API"""
    return {
        "name": settings.PROJECT_NAME,
        "version": settings.VERSION,
        "description": "Plataforma de matching laboral para estudiantes UNRC",
        "features": [
            "An√°lisis NLP de curr√≠culums",
            "Matchmaking inteligente",
            "B√∫squeda multi-proveedor de trabajos",
            "Gesti√≥n de roles y permisos",
            "Auditor√≠a y compliance LFPDPPP",
            "API RESTful escalable"
        ],
        "endpoints": {
            "students": "/api/v1/students - Gesti√≥n de estudiantes",
            "jobs": "/api/v1/jobs - B√∫squeda de trabajos",
            "companies": "/api/v1/companies - Gesti√≥n de empresas", 
            "matching": "/api/v1/matching - Algoritmos de matchmaking",
            "admin": "/api/v1/admin - Panel administrativo"
        },
        "documentation": "/docs",
        "contact": "contacto@ing.unrc.edu.ar"
    }


@app.get("/compliance", tags=["compliance"])
async def compliance_info():
    """
    Informaci√≥n de cumplimiento y privacidad
    Transparencia seg√∫n LFPDPPP y est√°ndares ISO/IEC 27001
    """
    return {
        "privacy_by_design": True,
        "data_minimization": True,
        "pseudonymization": False,  # TODO: Implementar en producci√≥n
        "consent_required": settings.REQUIRE_CONSENT,
        "data_subject_rights": [
            "Acceso a datos personales",
            "Rectificaci√≥n de datos incorrectos", 
            "Cancelaci√≥n/eliminaci√≥n de datos",
            "Oposici√≥n al tratamiento de datos"
        ],
        "retention_policy": f"Datos de estudiantes inactivos por {settings.DATA_RETENTION_DAYS} d√≠as son anonimizados",
        "audit_logging": settings.ENABLE_AUDIT_LOGGING,
        "encryption_at_rest": "Configurar cifrado a nivel de base de datos en producci√≥n",
        "encryption_in_transit": "TLS 1.3 requerido en producci√≥n",
        "data_protection_standards": [
            "Ley Federal de Protecci√≥n de Datos Personales en Posesi√≥n de Particulares (LFPDPPP)",
            "ISO/IEC 27001 - Gesti√≥n de Seguridad de la Informaci√≥n"
        ],
        "contact_dpo": "dpo@unrc.edu.ar",
        "last_updated": "2025-01-15",
        "notice": "Esta informaci√≥n es de referencia. Consulte documentos legales oficiales para t√©rminos vinculantes."
    }


# Incluir routers de endpoints
app.include_router(auth.router, prefix=settings.API_V1_STR)
app.include_router(students.router, prefix=settings.API_V1_STR)

# TODO: Incluir otros routers cuando est√©n implementados
# app.include_router(jobs.router, prefix=settings.API_V1_STR)
# app.include_router(companies.router, prefix=settings.API_V1_STR)
# app.include_router(matching.router, prefix=settings.API_V1_STR)
# app.include_router(admin.router, prefix=settings.API_V1_STR)


if __name__ == "__main__":
    # Ejecutar aplicaci√≥n directamente
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
